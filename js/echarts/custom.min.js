
function init_echarts(){
// start echarts
if("undefined"!=typeof echarts){console.log("init_echarts");var a={color:["#920076","#34495E","#BDC3C7","#3498DB","#9B59B6","#8abb6f","#759c6a","#bfd3b7"],title:{itemGap:8,textStyle:{fontWeight:"normal",color:"#408829"}},dataRange:{color:["#1f610a","#97b58d"]},toolbox:{color:["#408829","#408829","#408829","#408829"]},tooltip:{backgroundColor:"rgba(0,0,0,0.5)",axisPointer:{type:"line",lineStyle:{color:"#408829",type:"dashed"},crossStyle:{color:"#408829"},shadowStyle:{color:"rgba(200,200,200,0.3)"}}},dataZoom:{dataBackgroundColor:"#eee",fillerColor:"rgba(64,136,41,0.2)",handleColor:"#408829"},grid:{borderWidth:0},categoryAxis:{axisLine:{lineStyle:{color:"#408829"}},splitLine:{lineStyle:{color:["#eee"]}}},valueAxis:{axisLine:{lineStyle:{color:"#408829"}},splitArea:{show:!0,areaStyle:{color:["rgba(250,250,250,0.1)","rgba(200,200,200,0.1)"]}},splitLine:{lineStyle:{color:["#eee"]}}},timeline:{lineStyle:{color:"#408829"},controlStyle:{normal:{color:"#408829"},emphasis:{color:"#408829"}}},k:{itemStyle:{normal:{color:"#68a54a",color0:"#a9cba2",lineStyle:{width:1,color:"#408829",color0:"#86b379"}}}},map:{itemStyle:{normal:{areaStyle:{color:"#ddd"},label:{textStyle:{color:"#c12e34"}}},emphasis:{areaStyle:{color:"#99d2dd"},label:{textStyle:{color:"#c12e34"}}}}},force:{itemStyle:{normal:{linkStyle:{strokeColor:"#408829"}}}},chord:{padding:4,itemStyle:{normal:{lineStyle:{width:1,color:"rgba(128, 128, 128, 0.5)"},chordStyle:{lineStyle:{width:1,color:"rgba(128, 128, 128, 0.5)"}}},emphasis:{lineStyle:{width:1,color:"rgba(128, 128, 128, 0.5)"},chordStyle:{lineStyle:{width:1,color:"rgba(128, 128, 128, 0.5)"}}}}},gauge:{startAngle:225,endAngle:-45,axisLine:{show:!0,lineStyle:{color:[[.2,"#86b379"],[.8,"#68a54a"],[1,"#408829"]],width:8}},axisTick:{splitNumber:10,length:12,lineStyle:{color:"auto"}},axisLabel:{textStyle:{color:"auto"}},splitLine:{length:18,lineStyle:{color:"auto"}},pointer:{length:"90%",color:"auto"},title:{textStyle:{color:"#333"}},detail:{textStyle:{color:"auto"}}},textStyle:{fontFamily:"Arial, Verdana, sans-serif"}};



// save the real init function for later
//echarts.lazyLoadMakeChart = echarts.init();

// override init function
echarts.init2 = function(a, b) {

  // set scroll events
  jQuery(document).on('scroll load touchmove', handleScroll);
  jQuery(window).on('load', handleScroll);
$(document).ready(function() {
handleScroll();
});
  function handleScroll() {
    var $ = jQuery;
      var hT = $('#' + a).offset().top,
      hH = $('#' + a).outerHeight() / 2,
      wH = $(window).height(),
      wS = $(window).scrollTop();
    if (wS > (hT + hH - wH)) {
     // b.lazyLoaded = true;
      echarts.init(a, b);
      return;
    }
  }

  // Return fake listener to avoid errors
  return {
    addListener: function() {}
  };
};

  


if($("#lfmap").length){
    document.getElementById('lfmap').innerHTML = "<div id='map' style='width: 100%; height: 100%;'></div>";
// initialize the map
  var map = L.map('map').setView([10, 20],2);
  // load a tile layer
L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
    {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      maxZoom: 17,
      minZoom: 1
    }).addTo(map);

setTimeout(function () { map.invalidateSize() }, 1200);

  // load GeoJSON from an external file
  $.getJSON("data/rladies_map_data.geojson",function(data){
    
 L.AwesomeMarkers.Icon.prototype.options.prefix = 'fa';
     var purpleMarker = L.AwesomeMarkers.icon({
icon: 'check-circle',
    markerColor: 'purple'
  });

var darkpurpleMarker = L.AwesomeMarkers.icon({
icon: 'user-times',
markerColor: 'darkpurple'
  });

var darkredMarker = L.AwesomeMarkers.icon({
icon: 'user-times',
    markerColor: 'orange'
  });


    // add GeoJSON layer to the map once the file is loaded
 var pins =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if ( past_events >= 0 & feature.properties.days_since_last_event <= 180 | feature.properties.upcoming_events > 0) {
      var marker = new L.marker(latlng, {icon: purpleMarker});

marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Last Event Date: '+ feature.properties.last_event + '<br/>' + 'Active');
      return marker;
}
}  
}).addTo(map);


 var pins2 =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if (feature.properties.days_since_last_event > 180 & past_events != 0 & feature.properties.upcoming_events == 0 ){
      var marker = new L.marker(latlng, {icon: darkpurpleMarker});
marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events 
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Last Event Date: '+ feature.properties.last_event + '<br/>'  + 'Months Inactive: '+ Math.round(feature.properties.days_since_last_event/30) + ' months' + '<br/>' + 'Inactive: <a href="https://rladies.org/about-us/help/"><b>Become an Organizer!</b></a>');
      return marker;
}
}  
}).addTo(map);


var pins3 =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if ( past_events == 0 & feature.properties.upcoming_events == 0) {
      var marker = new L.marker(latlng, {icon: darkredMarker});

marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Months Inactive: '+ Math.round((new Date() - new Date(feature.properties.created) ) /(30*60*60*24*1000)) + ' months' + '<br/>' + 'Unbegun: <a href="https://rladies.org/about-us/help/"><b>Become an Organizer!</b></a>');
      return marker;
}
}  
}).addTo(map);

var totalPins1 = pins.getLayers().length;
var totalPins2 = pins2.getLayers().length;
var totalPins3 = pins3.getLayers().length;
total = totalPins1 + totalPins2 + totalPins3;

document.getElementById('active').innerHTML = totalPins1 + " Active " + "(" + Math.round((totalPins1/total)*100) + "%)";  
document.getElementById('inactive').innerHTML = totalPins2 +  " Inactive " + "(" + Math.round((totalPins2/total)*100) + "%)";  
document.getElementById('unbegun').innerHTML = totalPins3 +  " Unbegun " + "(" + Math.round((totalPins3/total)*100) + "%)";  

});

}

// rugs map
if($("#rugslfmap").length){
    document.getElementById('rugslfmap').innerHTML = "<div id='map2' style='width: 100%; height: 100%;'></div>";
// initialize the map
  var map = L.map('map2').setView([10, 20],2);
  // load a tile layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxZoom: 17,
      minZoom: 1
    }).addTo(map);

setTimeout(function () { map.invalidateSize() }, 1200);

  // load GeoJSON from an external file
  $.getJSON("data/rugs_map_data.geojson",function(data){
    
 L.AwesomeMarkers.Icon.prototype.options.prefix = 'fa';
     var purpleMarker = L.AwesomeMarkers.icon({
icon: 'check-circle',
    markerColor: 'blue'
  });

var darkpurpleMarker = L.AwesomeMarkers.icon({
icon: 'user-times',
markerColor: 'darkblue'
  });

var darkredMarker = L.AwesomeMarkers.icon({
icon: 'user-times',
    markerColor: 'orange'
  });


    // add GeoJSON layer to the map once the file is loaded
 var pins =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if ( past_events >= 0 & feature.properties.days_since_last_event <= 180 | feature.properties.upcoming_events > 0) {
      var marker = new L.marker(latlng, {icon: purpleMarker});

marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Last Event Date: '+ feature.properties.last_event + '<br/>' + 'Active');
      return marker;
}
}  
}).addTo(map);

var pins2 =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if (feature.properties.days_since_last_event > 180 & past_events != 0 & feature.properties.upcoming_events == 0 ){
      var marker = new L.marker(latlng, {icon: darkpurpleMarker});
marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events 
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Last Event Date: '+ feature.properties.last_event + '<br/>'  + 'Months Inactive: '+ Math.round(feature.properties.days_since_last_event/30) + ' months' + '<br/>' + 'Inactive: <a href="https://www.r-consortium.org/projects/r-user-group-support-program"><b>Apply For RConsortium Grant</b></a>');
      return marker;
}
}  
}).addTo(map);

var pins3 =   L.geoJson(data,{
pointToLayer: function(feature,latlng){
past_events = feature.properties.past_events;
if ( past_events == 0 & feature.properties.upcoming_events == 0) {
      var marker = new L.marker(latlng, {icon: darkredMarker});

marker.bindPopup("<b>" + feature.properties.url + '</b>' + '<br/>' + 'Created: '+ feature.properties.created + '<br/>' +
 'Members: ' + feature.properties.members  + '<br/>' + 'Past Events: '+ feature.properties.past_events
  + '<br/>' + 'Upcoming Events: '+ feature.properties.upcoming_events + '<br/>' + 'Months Inactive: '+ Math.round((new Date() - new Date(feature.properties.created) ) /(30*60*60*24*1000)) + ' months' + '<br/>' + 'Unbegun: <a href="https://www.r-consortium.org/projects/r-user-group-support-program"><b>Apply For RConsortium Grant</b></a>');
      return marker;
}
}  
}).addTo(map);

var totalPins1 = pins.getLayers().length;
var totalPins2 = pins2.getLayers().length;
var totalPins3 = pins3.getLayers().length;
total = totalPins1 + totalPins2 + totalPins3;

document.getElementById('active').innerHTML = totalPins1 + " Active " + "(" + Math.round((totalPins1/total)*100) + "%)";  
document.getElementById('inactive').innerHTML = totalPins2 +  " Inactive " + "(" + Math.round((totalPins2/total)*100) + "%)";  
document.getElementById('unbegun').innerHTML = totalPins3 +  " Unbegun " + "(" + Math.round((totalPins3/total)*100) + "%)";  
});

}



if($("#rladies_world_map").length){

d3.csv("data/rladies.csv").then(function(data) {
 var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });
  //console.log(cleandata);

   
   var numberproj = d3.nest()
  .key(function(d) { return d.country  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
var dat2 = JSON.stringify(numberproj).replace(/key/g, 'name').replace(/USA/g, 'United States of America').replace(/Serbia/g, 'Republic of Serbia');
//console.log(dat2);
 
var n=echarts.init(document.getElementById("rladies_world_map"),a);n.setOption({tooltip:{trigger:"item",formatter:function(a){var b=(a.value+"").split(".");return b=b[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,"$1,"),a.seriesName+"<br/>"+a.name+" : "+b}},toolbox:{show:!0,orient:"vertical",x:"right",y:"center",feature:{mark:{show:!0},dataView:{show:!1,title:"Text View",lang:["Text View","Close","Refresh"],readOnly:!1},restore:{show:!1,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},dataRange:{show:!1,min:0,max:1,color:["#ff94e7","#FFFFFF"]},series:[{name:"R Ladies Groups ",type:"map",mapType:"world",roam:!0,scaleLimit:{min:1.28},mapLocation:{y:50},itemStyle:{emphasis:{label:{show:!0}}}, data:JSON.parse(dat2)
}]})
}); // d3.csv call
} //end if rladies_world_map

if($("#rladies_country_chart").length){

d3.csv("data/rladies.csv").then(function(data) {
 var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });
  //console.log(cleandata);



var numbercountry = d3.nest()
  .key(function(d) { return d.country  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
dat3 = JSON.stringify(numbercountry);
  
   var parsedData = JSON.parse(dat3);

countries = [];
chapters = [];
for(let i = 0, l = parsedData.length; i < l; i++) {
    countries.push(parsedData[i].key);
    chapters.push(parsedData[i].value);
   }  
//console.log(chapters);

var c1=echarts.init(document.getElementById("rladies_country_chart"),a);c1.setOption({title:{text:"",subtext:""},color:["#9978ad"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Number of Chapters"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category",axisLabel:{
      rotate:50,interval:0
    }, boundaryGap:!0,data:countries  }],yAxis:[{type:"value"}],
series:[{name:"Number of Chapters",type:"bar",smooth:!1, itemStyle:{}, data:chapters, markLine: {data:[ {type:'average', name:'Average Number'} ]}    }]});
    $(window).on('resize', function(){
  c1.resize();
});

}); // d3.csv call
}  //if rladies_country_chart


if($("#gsoc_yearly_chart").length){

d3.tsv("data/gsoc.csv").then(function(data) {
 var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });
var numberproj = d3.nest()
  .key(function(d) { return d.Year  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
dat3 = JSON.stringify(numberproj);
var parsedData = JSON.parse(dat3);

year = [];
projects = [];
for(let i = 0, l = parsedData.length; i < l; i++) {
    year.push(parsedData[i].key);
    projects.push(parsedData[i].value);
   }  


var numberstud = d3.nest()
  .key(function(d) { return d.Year  })
  .key(function(d) { return d.Student  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
dat1 = JSON.stringify(numberstud);
var parsedData1 = JSON.parse(dat1);

students = [];
for(let i = 0, l = parsedData1.length; i < l; i++) {
    students.push(parsedData1[i].values.length);
   }  
//console.log(d3.sum(students))

var numberment = d3.nest()
  .key(function(d) { return d.Year  })
  .key(function(d) { return d.Mentors  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
dat2 = JSON.stringify(numberment);
var parsedData2 = JSON.parse(dat2);
//console.log(parsedData2[10].values[0].key.split(',').length)
mentors = [];
for(let i = 0, l = parsedData2.length; i < l; i++) {
tp =[];
for(let j = 0, ll = parsedData2[i].values.length; j < ll; j++) {
    tp.push(parsedData2[i].values[j].key.split(',').length);
   } 
 mentors.push(d3.sum(tp))
}
document.getElementById('avgmentor').innerHTML = Math.round(d3.sum(mentors)/year.length);

var c1=echarts.init(document.getElementById("gsoc_yearly_chart"),a);c1.setOption({title:{text:"",subtext:""},color:["#3498db"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Projects", "Students","Mentors"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category", boundaryGap:!0,data:year  }],yAxis:[{type:"value"}], series:[{name:"Projects",type:"line",smooth:!0,itemStyle:{normal:{areaStyle:{type:"default"}}},data:projects, markLine: {data:[ {type:'average', name:'Average Number'} ]}, markPoint:{data:[{type:"max",name:"Highest Project Count"},{type:"min",name:"Lowest Project Count"}]} }, {name:"Students",type:"bar",smooth:!0,itemStyle:{normal:{areaStyle:{type:"default"}}},data:students, markLine: {data:[ {type:'average', name:'Average Number'} ]}, markPoint:{data:[{type:"max",name:"Highest Student Count"},{type:"min",name:"Lowest Student Count"}]} },{name:"Mentors",type:"bar",smooth:!0,itemStyle:{normal:{areaStyle:{type:"default"}}},data: mentors, markLine: {data:[ {type:'average', name:'Average Number'} ]}, markPoint:{data:[{type:"max",name:"Highest Mentor Count"},{type:"min",name:"Lowest Mentor Count"}]}  }]})


if($("#workproduct").length){

   
   var numberproj = d3.nest()
  .key(function(d) { return d.WorkProduct  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
  
   dat3 = JSON.stringify(numberproj).replace(/key/g, 'name');
  
   var parsedData = JSON.parse(dat3);
   var wkprd = [];
   
   for(let i = 0, l = parsedData.length; i < l; i++) {
    wkprd.push(parsedData[i].name);
   }  
  
var h=echarts.init(document.getElementById("workproduct"),a);h.setOption({color:["#4ca0c6","#34495E","#BDC3C7","#c6d6dd","#a9a9a9","#3498DB","#025376"],tooltip:{trigger:"item",formatter:"{a} <br/>{b} : {c} "},legend:{x:"center",y:"bottom",data: wkprd },toolbox:{show:!0,feature:{magicType:{show:!0,title:{pie:"Pie",funnel:"Funnel"},type:["pie","funnel"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,series:[{name:"Number of  Projects",type:"funnel",width:"90%",left:"-1%",sort:"descending",data: JSON.parse(dat3) }]})



}


});
}


if($("#rugs_country_chart").length){

d3.csv("data/rugs.csv").then(function(data) {
 var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });
var numbercountry = d3.nest()
  .key(function(d) { return d.country  })
  .rollup(function(v) { return v.length;  })
  .entries(cleandata);
dat3 = JSON.stringify(numbercountry);
  
   var parsedData = JSON.parse(dat3);

countries = [];
chapters = [];
for(let i = 0, l = parsedData.length; i < l; i++) {
    countries.push(parsedData[i].key);
    chapters.push(parsedData[i].value);
   }  
var c1=echarts.init(document.getElementById("rugs_country_chart"),a);c1.setOption({title:{text:"",subtext:""},color:["#3498db"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Number of Groups"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category",axisLabel:{
      rotate:60,interval:0
    }, boundaryGap:!0,data:countries  }],yAxis:[{type:"value"}],
dataZoom: [
            {
                show: true,
                start: 0,
                end: 100
            },
            {
                type: 'inside',
                start: 0,
                end: 100
            },
            {
                show: true,
                yAxisIndex: 0,
                filterMode: 'empty',
                width: 30,
                height: '80%',
                showDataShadow: false,
                left: '93%'
            }
        ],
grid: { bottom: 120 },
series:[{name:"Number of Groups",type:"bar",smooth:!1, itemStyle:{}, data:chapters, markLine: {data:[ {type:'average', name:'Average Number'} ]}     }]});
    $(window).on('resize', function(){
  c1.resize();
});

}); // d3.csv call
}  //if rugs_country_chart


if($("#rugs_top_dest").length){
d3.csv("data/rugs.csv").then(function(data) {
   var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });

var region_city = d3.nest()
  .key(function(d) { return d.country })
  //.key(function(d) { return d.members }) 
    .rollup(function(v) { return  d3.sum(v, function(d) { return d.members; })})
    .entries(cleandata)
//console.log(region_city);

var region_members = d3.nest()
  .key(function(d) { return d.region  })
.key(function(d) { return d.city })
   .rollup(function(v) { return {
    usergroups: v.length,
    members: d3.sum(v, function(d) { return d.members; }),
   pastevents: d3.sum(v, function(d) { return d.past_events; })
  }; })
  .entries(cleandata);


//console.log(region_members[0].values[0])

var region = [];
   var us_can = new Array();
  var europe = [];
  var latinAm = [];
  var asia = [];
  var australia = [];
  var africa = [];
   for(let i = 0, l = region_members.length; i < l; i++) {
      region.push(region_members[i].key);
    if(region_members[i].key == "US/Canada"){
		us_can.push(region_members[i].values);
   }
if(region_members[i].key == "Europe"){
		europe.push(region_members[i].values);
   }
if(region_members[i].key == "Latin America"){
		latinAm.push(region_members[i].values);
   }
if(region_members[i].key == "Asia"){
		asia.push(region_members[i].values);
   }
if(region_members[i].key == "Australia"){
		australia.push(region_members[i].values);
   }
if(region_members[i].key == "Africa"){
		africa.push(region_members[i].values);
   }


}

// sort based on members
us_sort_members = us_can[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);


// sort based on usergroups
us_sort_usergroups = us_can[0].sort(function(x, y){
   return d3.descending(x.value.usergroups, y.value.usergroups);
}).slice(0);

// sort based on pastevents 
us_sort_pastevents = us_can[0].sort(function(x, y){
   return d3.descending(x.value.pastevents , y.value.pastevents );
}).slice(0);

eu_sort_members = europe[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);


eu_sort_usergroups = europe[0].sort(function(x, y){
   return d3.descending(x.value.usergroups, y.value.usergroups);
}).slice(0);

// sort based on pastevents 
eu_sort_pastevents = europe[0].sort(function(x, y){
   return d3.descending(x.value.pastevents , y.value.pastevents );
}).slice(0);


latam_sort_members = latinAm[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

asia_sort_members  = asia[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

au_sort_members  = australia[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

af_sort_members  = africa[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

//console.log(eu_sort_members)
//console.log(eu_sort_usergroups)
//console.log(eu_sort_pastevents)

region_city2 = region_city.sort(function(x, y){
   return d3.descending(x.value, y.value);
});

city = [];
members = [];
   for(let i = 0, l = 40; i < l; i++) {
	city.push(region_city2[i].key);
     members.push(region_city2[i].value);
}

var f1=echarts.init(document.getElementById("rugs_top_dest"),a);f1.setOption({color:["red"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:city.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:members.reverse()   }]})


uscity = [];
usmembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	uscity.push(us_sort_members[i].key);
     usmembers.push(us_sort_members[i].value.members);
}

var fus=echarts.init(document.getElementById("rugs_top_us_dest"),a);fus.setOption({title:{text:"US/Canada",subtext:"Top 20 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:uscity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:usmembers.reverse()   }]})


eucity = [];
eumembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	eucity.push(eu_sort_members[i].key);
     eumembers.push(eu_sort_members[i].value.members);
}

var feu=echarts.init(document.getElementById("rugs_top_eu_dest"),a);feu.setOption({title:{text:"Europe",subtext:"Top 20 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:eucity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:eumembers.reverse()   }]})

latamcity = [];
latammembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	latamcity.push(latam_sort_members[i].key);
     latammembers.push(latam_sort_members[i].value.members);
}

var flat=echarts.init(document.getElementById("rugs_top_latam_dest"),a);flat.setOption({title:{text:"Latin America",subtext:"Top 20 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:latamcity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:latammembers.reverse()   }]})

asiacity = [];
asiamembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	asiacity.push(asia_sort_members[i].key);
     asiamembers.push(asia_sort_members[i].value.members);
}

var fasia=echarts.init(document.getElementById("rugs_top_asia_dest"),a);fasia.setOption({title:{text:"Asia",subtext:"Top 20 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:asiacity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:asiamembers.reverse()   }]})

//console.log(af_sort_members)

auscity = [];
ausmembers = [];
   for(let i = 0, l = 10; i < l; i++) {
	auscity.push(au_sort_members[i].key);
     ausmembers.push(au_sort_members[i].value.members);
}

var faus=echarts.init(document.getElementById("rugs_top_aus_dest"),a);faus.setOption({title:{text:"Australia",subtext:"Top 10 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:auscity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:20,itemStyle:{}, data:ausmembers.reverse()   }]})

afrcity = [];
afrmembers = [];
   for(let i = 0, l = 10; i < l; i++) {
	afrcity.push(af_sort_members[i].key);
     afrmembers.push(af_sort_members[i].value.members);
}

var fafr=echarts.init(document.getElementById("rugs_top_afr_dest"),a);fafr.setOption({title:{text:"Africa",subtext:"Top 10 Cities"},color:["#80bbd6"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:afrcity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R Users",type:"bar",smooth:!1, barWidth:20,itemStyle:{}, data:afrmembers.reverse()   }]})

}); // d3.call
}

if($("#rladies_top_us_dest").length){
d3.csv("data/rladies.csv").then(function(data) {
   var cleandata = data.map(function(d) {
    var cleanD = {};
    d3.keys(d).forEach(function(k) {
      cleanD[_.trim(k)] = _.trim(d[k]);
    });
    return cleanD;
  });

var region_members = d3.nest()
  .key(function(d) { return d.region  })
.key(function(d) { return d.city })
   .rollup(function(v) { return {
    usergroups: v.length,
    members: d3.sum(v, function(d) { return d.members; }),
   pastevents: d3.sum(v, function(d) { return d.past_events; })
  }; })
  .entries(cleandata);


var region = [];
   var us_can = new Array();
  var europe = [];
  var latinAm = [];
  var asia = [];
  var australia = [];
  var africa = [];
   for(let i = 0, l = region_members.length; i < l; i++) {
      region.push(region_members[i].key);
    if(region_members[i].key == "US/Canada"){
		us_can.push(region_members[i].values);
   }
if(region_members[i].key == "Europe"){
		europe.push(region_members[i].values);
   }
if(region_members[i].key == "Latin America"){
		latinAm.push(region_members[i].values);
   }
if(region_members[i].key == "Asia"){
		asia.push(region_members[i].values);
   }
if(region_members[i].key == "Australia"){
		australia.push(region_members[i].values);
   }
if(region_members[i].key == "Africa"){
		africa.push(region_members[i].values);
   }


}

// sort based on members
us_sort_members = us_can[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);


// sort based on usergroups
us_sort_usergroups = us_can[0].sort(function(x, y){
   return d3.descending(x.value.usergroups, y.value.usergroups);
}).slice(0);

// sort based on pastevents 
us_sort_pastevents = us_can[0].sort(function(x, y){
   return d3.descending(x.value.pastevents , y.value.pastevents );
}).slice(0);

eu_sort_members = europe[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);


eu_sort_usergroups = europe[0].sort(function(x, y){
   return d3.descending(x.value.usergroups, y.value.usergroups);
}).slice(0);

// sort based on pastevents 
eu_sort_pastevents = europe[0].sort(function(x, y){
   return d3.descending(x.value.pastevents , y.value.pastevents );
}).slice(0);


latam_sort_members = latinAm[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

asia_sort_members  = asia[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

au_sort_members  = australia[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

af_sort_members  = africa[0].sort(function(x, y){
   return d3.descending(x.value.members, y.value.members);
}).slice(0);

uscity = [];
usmembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	uscity.push(us_sort_members[i].key);
     usmembers.push(us_sort_members[i].value.members);
}

var fus1=echarts.init(document.getElementById("rladies_top_us_dest"),a);fus1.setOption({title:{text:"US/Canada",subtext:"Top 20 Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:uscity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:usmembers.reverse()   }]})


eucity = [];
eumembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	eucity.push(eu_sort_members[i].key);
     eumembers.push(eu_sort_members[i].value.members);
}

var feu=echarts.init(document.getElementById("rladies_top_eu_dest"),a);feu.setOption({title:{text:"Europe",subtext:"Top 20 Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:eucity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:eumembers.reverse()   }]})

latamcity = [];
latammembers = [];
   for(let i = 0, l = 20; i < l; i++) {
	latamcity.push(latam_sort_members[i].key);
     latammembers.push(latam_sort_members[i].value.members);
}

var flat=echarts.init(document.getElementById("rladies_top_latam_dest"),a);flat.setOption({title:{text:"Latin America",subtext:"Top 20 Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:latamcity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:7,itemStyle:{}, data:latammembers.reverse()   }]})

asiacity = [];
asiamembers = [];
   for(let i = 0, l = 5; i < l; i++) {
	asiacity.push(asia_sort_members[i].key);
     asiamembers.push(asia_sort_members[i].value.members);
}

var fasia=echarts.init(document.getElementById("rladies_top_asia_dest"),a);fasia.setOption({title:{text:"Asia",subtext:"Top 5 Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:asiacity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:35,itemStyle:{}, data:asiamembers.reverse()   }]})

//console.log(af_sort_members)

auscity = [];
ausmembers = [];
   for(let i = 0, l = 5; i < l; i++) {
	auscity.push(au_sort_members[i].key);
     ausmembers.push(au_sort_members[i].value.members);
}

var faus=echarts.init(document.getElementById("rladies_top_aus_dest"),a);faus.setOption({title:{text:"Australia",subtext:"Top 5  Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:auscity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:35,itemStyle:{}, data:ausmembers.reverse()   }]})

afrcity = [];
afrmembers = [];
   for(let i = 0, l = 5; i < l; i++) {
	afrcity.push(af_sort_members[i].key);
     afrmembers.push(af_sort_members[i].value.members);
}

var fafr=echarts.init(document.getElementById("rladies_top_afr_dest"),a);fafr.setOption({title:{text:"Africa",subtext:"Top 5  Cities"},color:["#920076"],tooltip:{trigger:"axis"},calculable:!0,xAxis:[{type:"value"}],yAxis:[{type:"category",boundaryGap:!0, axisLabel:{ interval:0 }, data:afrcity.reverse()  }],grid: { left: 100 },
series:[{name:"Number of R-Ladies",type:"bar",smooth:!1, barWidth:35,itemStyle:{}, data:afrmembers.reverse()   }]})

}); // d3.call
}


// rugs region chart
if($("#rugs_region_chart").length){
d3.json("data/rugs_summary.json").then(function(data) {
 regiondata = JSON.stringify(data[1]);
 chapters  = [data[1][0].us_can, data[1][0].eur, data[1][0].latinAm, data[1][0].aus, data[1][0].asia, data[1][0].afr];
 regions = ["US/Canada","Europe","Latin America","Australia","Asia","Africa"]


var f1=echarts.init(document.getElementById("rugs_region_chart"),a);f1.setOption({title:{text:"",subtext:""},color:["#80bbd6"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Number of Groups"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category",boundaryGap:!0,data:regions  }],yAxis:[{type:"value"}],series:[{name:"Number of Groups",type:"bar",smooth:!1, barWidth:70,itemStyle:{}, data:chapters    }]})


if($("#rugs_member_pie").length){

   member_data = [{name: "Latin America", value: data[1][0].latinAm_m }, {name: "US/Canada", value: data[1][0].us_can_m }, {name: "Europe", value: data[1][0].eur_m }, {name: "Africa", value: data[1][0].afr_m }, {name: "Asia", value: data[1][0].asia_m }, {name: "Australia", value: data[1][0].aus_m } ];

var region  = [];
   
   for(let i = 0, l = member_data.length; i < l; i++) {
    region.push(member_data[i].name);
   }

var h=echarts.init(document.getElementById("rugs_member_pie"),a);h.setOption({color:["#4ca0c6","#34495E","#BDC3C7","#c6d6dd","#a9a9a9","#3498DB","#025376"],tooltip:{trigger:"item",formatter:"{a} <br/>{b} : {c} ({d}%)"},legend:{x:"center",y:"bottom",data: region },toolbox:{show:!0,feature:{magicType:{show:!0,type:["pie","funnel"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,series:[{name:"Number of R Users",type:"pie",radius:[45,170],center:["50%",190],x:"50%",max:40,sort:"ascending",data: member_data }]})
}

}); // d3.csv call

}


//if($("#region_chart").length){

d3.json("data/rladies_summary.json").then(function(data) {
 regiondata = JSON.stringify(data[1]);
 chapters  = [data[1][0].us_can, data[1][0].eur, data[1][0].latinAm, data[1][0].aus, data[1][0].asia, data[1][0].afr];
 regions = ["US/Canada","Europe","Latin America","Australia","Asia","Africa"]


var f1=echarts.init(document.getElementById("region_chart"),a);f1.setOption({title:{text:"",subtext:""},color:["#9978ad"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Number of Chapters"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category",boundaryGap:!0,data:regions  }],yAxis:[{type:"value"}],series:[{name:"Number of Chapters",type:"bar",smooth:!1, barWidth:70,itemStyle:{}, data:chapters    }]})



if($("#member_pie").length){

   member_data = [{name: "Latin America", value: data[1][0].latinAm_m }, {name: "US/Canada", value: data[1][0].us_can_m }, {name: "Europe", value: data[1][0].eur_m }, {name: "Africa", value: data[1][0].afr_m }, {name: "Asia", value: data[1][0].asia_m }, {name: "Australia", value: data[1][0].aus_m } ];

var region  = [];
   
   for(let i = 0, l = member_data.length; i < l; i++) {
    region.push(member_data[i].name);
   }

var h=echarts.init(document.getElementById("member_pie"),a);h.setOption({tooltip:{trigger:"item",formatter:"{a} <br/>{b} : {c} ({d}%)"},legend:{x:"center",y:"bottom",data: region },toolbox:{show:!0,feature:{magicType:{show:!0,type:["pie","funnel"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,series:[{name:"Number of R-Ladies ",type:"pie",radius:[45,170],center:["50%",190],roseType:"radius",x:"50%",max:40,sort:"ascending",data: member_data }]})
}

}); // d3.csv call for region_chart



if($("#cumulative_chart").length){

d3.json("data/rladies_cumulative.json").then(function(data) {
//console.log(data);
 dates = [];
 counts = []
   for(let i = 0, l = data.length; i < l; i++) {
      dates.push(data[i].datecreated)
     counts.push(data[i].Freq)
   }


var f2=echarts.init(document.getElementById("cumulative_chart"),a);f2.setOption({title:{text:"",subtext:""},color:["#920076"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Cumulative Count of Chapters"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category", axisLabel:{
      formatter: function (value, index) {
    // Formatted to be year/month; display year only in the first label
    var date = new Date(value);
//add leading 0 to months less than 10 to retain double digit month
var MM = ((date.getMonth() + 1) < 10 ? '0' : '') + (date.getMonth() + 1);
    var texts = [date.getFullYear(), MM];
        return texts.join('-');
},interval:300, showMaxLabel:!0
    }, boundaryGap:!1,data: dates}],yAxis:[{type:"value", splitArea:{show:!0,areaStyle:{color:["#fae4ff","#fcefff"]}}
 }],series:[{name:"Cumulative Count of Chapters",type:"line",smooth:!1,itemStyle:{normal:{areaStyle:{type:"default"}}},data:counts}]})

}); // d3.csv call for cumulative_chart


}
if($("#rugs_cumulative_chart").length){

d3.json("data/rugs_cumulative.json").then(function(data) {
//console.log(data);
 dates = [];
 counts = []
   for(let i = 0, l = data.length; i < l; i++) {
      dates.push(data[i].datecreated)
     counts.push(data[i].Freq)
   }


var f2=echarts.init(document.getElementById("rugs_cumulative_chart"),a);f2.setOption({title:{text:"",subtext:""},color:["#6D98C3"],tooltip:{trigger:"axis"},legend:{x:220,y:40,data:["Cumulative Group Count"]},toolbox:{show:!0,feature:{magicType:{show:!0,title:{line:"Line",bar:"Bar"},type:["line","bar"]},restore:{show:!0,title:"Restore"},saveAsImage:{show:!0,title:"Save Image"}}},calculable:!0,xAxis:[{type:"category", axisLabel:{
      formatter: function (value, index) {
    // Formatted to be year/month; display year only in the first label
    var date = new Date(value);
//add leading 0 to months less than 10 to retain double digit month
var MM = ((date.getMonth() + 1) < 10 ? '0' : '') + (date.getMonth() + 1);
    var texts = [date.getFullYear(), MM];
        return date.getFullYear();
},interval:300, showMaxLabel:!0
    }, boundaryGap:!1,data: dates}],yAxis:[{type:"value", splitArea:{show:!0,areaStyle:{color:["#f3f9fc","#eef5f9"]}}
 }],
dataZoom: [
            {
                show: true,
                start: 0,
                end: 100
            },
            {
                type: 'inside',
                start: 0,
                end: 100
            },
            {
                show: false,
                yAxisIndex: 0,
                filterMode: 'empty',
                width: 30,
                height: '80%',
                showDataShadow: false,
                left: '93%'
            }
        ],


series:[{name:"Cumulative Group Count",type:"line",smooth:!1,itemStyle:{normal:{areaStyle:{type:"default"}}},data:counts}]})

}); // d3.csv call for cumulative_chart


}

  }
}


!function(a,b){var c=function(a,b,c){var d;return function(){function h(){c||a.apply(f,g),d=null}var f=this,g=arguments;d?clearTimeout(d):c&&a.apply(f,g),d=setTimeout(h,b||100)}};jQuery.fn[b]=function(a){return a?this.bind("resize",c(a)):this.trigger(b)}}(jQuery,"smartresize");var CURRENT_URL=window.location.href.split("#")[0].split("?")[0],$BODY=$("body"),$MENU_TOGGLE=$("#menu_toggle"),$SIDEBAR_MENU=$("#sidebar-menu"),$SIDEBAR_FOOTER=$(".sidebar-footer"),$LEFT_COL=$(".left_col"),$RIGHT_COL=$(".right_col"),$NAV_MENU=$(".nav_menu"),$FOOTER=$("footer"),randNum=function(){return Math.floor(21*Math.random())+20};$(document).ready(function(){$(".collapse-link").on("click",function(){var a=$(this).closest(".x_panel"),b=$(this).find("i"),c=a.find(".x_content");a.attr("style")?c.slideToggle(200,function(){a.removeAttr("style")}):(c.slideToggle(200),a.css("height","auto")),b.toggleClass("fa-chevron-up fa-chevron-down")}),$(".close-link").click(function(){var a=$(this).closest(".x_panel");a.remove()})}),$(document).ready(function(){$('[data-toggle="tooltip"]').tooltip({container:"body"})}),$(".progress .progress-bar")[0]&&$(".progress .progress-bar").progressbar(),$(document).ready(function(){if($(".js-switch")[0]){var a=Array.prototype.slice.call(document.querySelectorAll(".js-switch"));a.forEach(function(a){new Switchery(a,{color:"#26B99A"})})}}),$(document).ready(function(){$("input.flat")[0]&&$(document).ready(function(){$("input.flat").iCheck({checkboxClass:"icheckbox_flat-green",radioClass:"iradio_flat-green"})})}),$("table input").on("ifChecked",function(){checkState="",$(this).parent().parent().parent().addClass("selected"),countChecked()}),$("table input").on("ifUnchecked",function(){checkState="",$(this).parent().parent().parent().removeClass("selected"),countChecked()});var checkState="";$(".bulk_action input").on("ifChecked",function(){checkState="",$(this).parent().parent().parent().addClass("selected"),countChecked()}),$(".bulk_action input").on("ifUnchecked",function(){checkState="",$(this).parent().parent().parent().removeClass("selected"),countChecked()}),$(".bulk_action input#check-all").on("ifChecked",function(){checkState="all",countChecked()}),$(".bulk_action input#check-all").on("ifUnchecked",function(){checkState="none",countChecked()}),$(document).ready(function(){$(".expand").on("click",function(){$(this).next().slideToggle(200),$expand=$(this).find(">:first-child"),"+"==$expand.text()?$expand.text("-"):$expand.text("+")})}),"undefined"!=typeof NProgress&&($(document).ready(function(){NProgress.start()}),$(window).load(function(){NProgress.done()}));var originalLeave=$.fn.popover.Constructor.prototype.leave;$.fn.popover.Constructor.prototype.leave=function(a){var c,d,b=a instanceof this.constructor?a:$(a.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);originalLeave.call(this,a),a.currentTarget&&(c=$(a.currentTarget).siblings(".popover"),d=b.timeout,c.one("mouseenter",function(){clearTimeout(d),c.one("mouseleave",function(){$.fn.popover.Constructor.prototype.leave.call(b,b)})}))},$("body").popover({selector:"[data-popover]",trigger:"click hover",delay:{show:50,hide:400}}),$(document).ready(function(){init_echarts()});
